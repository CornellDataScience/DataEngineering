/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package java;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Plague_Update extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6938739439238655929L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Plague_Update\",\"namespace\":\"java\",\"fields\":[{\"name\":\"location\",\"type\":\"string\"},{\"name\":\"newDeaths\",\"type\":\"int\"},{\"name\":\"newCured\",\"type\":\"int\"},{\"name\":\"newInfections\",\"type\":\"int\"},{\"name\":\"severity\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Plague_Update> ENCODER =
      new BinaryMessageEncoder<Plague_Update>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Plague_Update> DECODER =
      new BinaryMessageDecoder<Plague_Update>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Plague_Update> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Plague_Update> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Plague_Update>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Plague_Update to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Plague_Update from a ByteBuffer. */
  public static Plague_Update fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence location;
  @Deprecated public int newDeaths;
  @Deprecated public int newCured;
  @Deprecated public int newInfections;
  @Deprecated public float severity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Plague_Update() {}

  /**
   * All-args constructor.
   * @param location The new value for location
   * @param newDeaths The new value for newDeaths
   * @param newCured The new value for newCured
   * @param newInfections The new value for newInfections
   * @param severity The new value for severity
   */
  public Plague_Update(java.lang.CharSequence location, java.lang.Integer newDeaths, java.lang.Integer newCured, java.lang.Integer newInfections, java.lang.Float severity) {
    this.location = location;
    this.newDeaths = newDeaths;
    this.newCured = newCured;
    this.newInfections = newInfections;
    this.severity = severity;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return location;
    case 1: return newDeaths;
    case 2: return newCured;
    case 3: return newInfections;
    case 4: return severity;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: location = (java.lang.CharSequence)value$; break;
    case 1: newDeaths = (java.lang.Integer)value$; break;
    case 2: newCured = (java.lang.Integer)value$; break;
    case 3: newInfections = (java.lang.Integer)value$; break;
    case 4: severity = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public java.lang.CharSequence getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(java.lang.CharSequence value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'newDeaths' field.
   * @return The value of the 'newDeaths' field.
   */
  public java.lang.Integer getNewDeaths() {
    return newDeaths;
  }

  /**
   * Sets the value of the 'newDeaths' field.
   * @param value the value to set.
   */
  public void setNewDeaths(java.lang.Integer value) {
    this.newDeaths = value;
  }

  /**
   * Gets the value of the 'newCured' field.
   * @return The value of the 'newCured' field.
   */
  public java.lang.Integer getNewCured() {
    return newCured;
  }

  /**
   * Sets the value of the 'newCured' field.
   * @param value the value to set.
   */
  public void setNewCured(java.lang.Integer value) {
    this.newCured = value;
  }

  /**
   * Gets the value of the 'newInfections' field.
   * @return The value of the 'newInfections' field.
   */
  public java.lang.Integer getNewInfections() {
    return newInfections;
  }

  /**
   * Sets the value of the 'newInfections' field.
   * @param value the value to set.
   */
  public void setNewInfections(java.lang.Integer value) {
    this.newInfections = value;
  }

  /**
   * Gets the value of the 'severity' field.
   * @return The value of the 'severity' field.
   */
  public java.lang.Float getSeverity() {
    return severity;
  }

  /**
   * Sets the value of the 'severity' field.
   * @param value the value to set.
   */
  public void setSeverity(java.lang.Float value) {
    this.severity = value;
  }

  /**
   * Creates a new Plague_Update RecordBuilder.
   * @return A new Plague_Update RecordBuilder
   */
  public static java.Plague_Update.Builder newBuilder() {
    return new java.Plague_Update.Builder();
  }

  /**
   * Creates a new Plague_Update RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Plague_Update RecordBuilder
   */
  public static java.Plague_Update.Builder newBuilder(java.Plague_Update.Builder other) {
    return new java.Plague_Update.Builder(other);
  }

  /**
   * Creates a new Plague_Update RecordBuilder by copying an existing Plague_Update instance.
   * @param other The existing instance to copy.
   * @return A new Plague_Update RecordBuilder
   */
  public static java.Plague_Update.Builder newBuilder(java.Plague_Update other) {
    return new java.Plague_Update.Builder(other);
  }

  /**
   * RecordBuilder for Plague_Update instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Plague_Update>
    implements org.apache.avro.data.RecordBuilder<Plague_Update> {

    private java.lang.CharSequence location;
    private int newDeaths;
    private int newCured;
    private int newInfections;
    private float severity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(java.Plague_Update.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.location)) {
        this.location = data().deepCopy(fields()[0].schema(), other.location);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.newDeaths)) {
        this.newDeaths = data().deepCopy(fields()[1].schema(), other.newDeaths);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.newCured)) {
        this.newCured = data().deepCopy(fields()[2].schema(), other.newCured);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.newInfections)) {
        this.newInfections = data().deepCopy(fields()[3].schema(), other.newInfections);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.severity)) {
        this.severity = data().deepCopy(fields()[4].schema(), other.severity);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Plague_Update instance
     * @param other The existing instance to copy.
     */
    private Builder(java.Plague_Update other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.location)) {
        this.location = data().deepCopy(fields()[0].schema(), other.location);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.newDeaths)) {
        this.newDeaths = data().deepCopy(fields()[1].schema(), other.newDeaths);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.newCured)) {
        this.newCured = data().deepCopy(fields()[2].schema(), other.newCured);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.newInfections)) {
        this.newInfections = data().deepCopy(fields()[3].schema(), other.newInfections);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.severity)) {
        this.severity = data().deepCopy(fields()[4].schema(), other.severity);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public java.lang.CharSequence getLocation() {
      return location;
    }

    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public java.Plague_Update.Builder setLocation(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.location = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public java.Plague_Update.Builder clearLocation() {
      location = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'newDeaths' field.
      * @return The value.
      */
    public java.lang.Integer getNewDeaths() {
      return newDeaths;
    }

    /**
      * Sets the value of the 'newDeaths' field.
      * @param value The value of 'newDeaths'.
      * @return This builder.
      */
    public java.Plague_Update.Builder setNewDeaths(int value) {
      validate(fields()[1], value);
      this.newDeaths = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'newDeaths' field has been set.
      * @return True if the 'newDeaths' field has been set, false otherwise.
      */
    public boolean hasNewDeaths() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'newDeaths' field.
      * @return This builder.
      */
    public java.Plague_Update.Builder clearNewDeaths() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'newCured' field.
      * @return The value.
      */
    public java.lang.Integer getNewCured() {
      return newCured;
    }

    /**
      * Sets the value of the 'newCured' field.
      * @param value The value of 'newCured'.
      * @return This builder.
      */
    public java.Plague_Update.Builder setNewCured(int value) {
      validate(fields()[2], value);
      this.newCured = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'newCured' field has been set.
      * @return True if the 'newCured' field has been set, false otherwise.
      */
    public boolean hasNewCured() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'newCured' field.
      * @return This builder.
      */
    public java.Plague_Update.Builder clearNewCured() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'newInfections' field.
      * @return The value.
      */
    public java.lang.Integer getNewInfections() {
      return newInfections;
    }

    /**
      * Sets the value of the 'newInfections' field.
      * @param value The value of 'newInfections'.
      * @return This builder.
      */
    public java.Plague_Update.Builder setNewInfections(int value) {
      validate(fields()[3], value);
      this.newInfections = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'newInfections' field has been set.
      * @return True if the 'newInfections' field has been set, false otherwise.
      */
    public boolean hasNewInfections() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'newInfections' field.
      * @return This builder.
      */
    public java.Plague_Update.Builder clearNewInfections() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'severity' field.
      * @return The value.
      */
    public java.lang.Float getSeverity() {
      return severity;
    }

    /**
      * Sets the value of the 'severity' field.
      * @param value The value of 'severity'.
      * @return This builder.
      */
    public java.Plague_Update.Builder setSeverity(float value) {
      validate(fields()[4], value);
      this.severity = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'severity' field has been set.
      * @return True if the 'severity' field has been set, false otherwise.
      */
    public boolean hasSeverity() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'severity' field.
      * @return This builder.
      */
    public java.Plague_Update.Builder clearSeverity() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Plague_Update build() {
      try {
        Plague_Update record = new Plague_Update();
        record.location = fieldSetFlags()[0] ? this.location : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.newDeaths = fieldSetFlags()[1] ? this.newDeaths : (java.lang.Integer) defaultValue(fields()[1]);
        record.newCured = fieldSetFlags()[2] ? this.newCured : (java.lang.Integer) defaultValue(fields()[2]);
        record.newInfections = fieldSetFlags()[3] ? this.newInfections : (java.lang.Integer) defaultValue(fields()[3]);
        record.severity = fieldSetFlags()[4] ? this.severity : (java.lang.Float) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Plague_Update>
    WRITER$ = (org.apache.avro.io.DatumWriter<Plague_Update>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Plague_Update>
    READER$ = (org.apache.avro.io.DatumReader<Plague_Update>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
